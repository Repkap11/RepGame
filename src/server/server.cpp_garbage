// https://github.com/eliben/code-for-blog/blob/master/2017/async-socket-server/epoll-server.c

// Asynchronous socket server - accepting multiple clients concurrently,
// multiplexing the connections with epoll.
//
// Eli Bendersky [http://eli.thegreenplace.net]
// This code is in the public domain.
#include <assert.h>
#include <errno.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/epoll.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <unistd.h>

// Start utils
#include <fcntl.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <sys/types.h>
//#define _GNU_SOURCE
#include <netdb.h>

#include "server/server.hpp"
#include "common/RepGame.hpp"

//#define MAXFDS 16 * 1024
#define MAXFDS 16

#define pr_debug( fmt, ... ) fprintf( stdout, "%s:%d:%s():" fmt "\n", __FILE__, __LINE__, __func__, ##__VA_ARGS__ );

#define N_BACKLOG 64

int listen_inet_socket( int portnum ) {
    int sockfd = socket( AF_INET, SOCK_STREAM, 0 );
    if ( sockfd < 0 ) {
        pr_debug( "ERROR opening socket" );
    }

    // This helps avoid spurious EADDRINUSE when the previous instance of this
    // server died.
    int opt = 1;
    if ( setsockopt( sockfd, SOL_SOCKET, SO_REUSEADDR, &opt, sizeof( opt ) ) < 0 ) {
        pr_debug( "setsockopt" );
    }

    struct sockaddr_in serv_addr;
    memset( &serv_addr, 0, sizeof( serv_addr ) );
    serv_addr.sin_family = AF_INET;
    serv_addr.sin_addr.s_addr = INADDR_ANY;
    serv_addr.sin_port = htons( portnum );

    if ( bind( sockfd, ( struct sockaddr * )&serv_addr, sizeof( serv_addr ) ) < 0 ) {
        pr_debug( "ERROR on binding" );
    }

    if ( listen( sockfd, N_BACKLOG ) < 0 ) {
        pr_debug( "ERROR on listen" );
    }

    return sockfd;
}

void make_socket_non_blocking( int sockfd ) {
    int flags = fcntl( sockfd, F_GETFL, 0 );
    if ( flags == -1 ) {
        pr_debug( "fcntl F_GETFL" );
    }

    if ( fcntl( sockfd, F_SETFL, flags | O_NONBLOCK ) == -1 ) {
        pr_debug( "fcntl F_SETFL O_NONBLOCK" );
    }
}

// End utils

typedef enum { INITIAL_ACK, WAIT_FOR_MSG, IN_MSG } ProcessingState;

typedef struct {
    ProcessingState state;
    NetPacket sendbuf;
} peer_state_t;

// Each peer is globally identified by the file descriptor (fd) it's connected
// on. As long as the peer is connected, the fd is unique to it. When a peer
// disconnects, a new peer may connect and get the same fd. on_peer_connected
// should initialize the state properly to remove any trace of the old peer on
// the same fd.
peer_state_t global_state[ MAXFDS ];

// Callbacks (on_XXX functions) return this status to the main loop; the status
// instructs the loop about the next steps for the fd for which the callback was
// invoked.
// want_read=true means we want to keep monitoring this fd for reading.
// want_write=true means we want to keep monitoring this fd for writing.
// When both are false it means the fd is no longer needed and can be closed.
typedef struct {
    bool want_read;
    bool want_write;
} fd_status_t;

void server_send_client_message( int client_fd, NetPacket *update ) {
    // pr_debug( "Sending message to:%d block:%d", client_fd, update->blockID );

    global_state[client_fd].state =
    int status = write( client_fd, ( void * )update, sizeof( NetPacket ) );
    if ( status < 0 ) {
        // pr_debug( "Unable to send message to socket" );
    }
}

void server_send_message_to_all_but_one( int client_fd, NetPacket *packet ) {
    for ( int prop_id = 0; prop_id < MAXFDS; prop_id++ ) {
        if ( prop_id == client_fd ) {
            // Don't send the message back to the one client.
            continue;
        }
        if ( global_state[ prop_id ].state != INITIAL_ACK ) {
            server_send_client_message( prop_id, packet );
        }
    }
}

void server_on_client_connected( int client_fd ) {
    pr_debug( "%d", client_fd );
    {
        NetPacket packet;
        packet.player_id = client_fd;
        packet.type = PLAYER_CONNECTED;
        server_send_message_to_all_but_one( client_fd, &packet );
    }

    for ( int online_id = 0; online_id < MAXFDS; online_id++ ) {
        if ( online_id == client_fd ) {
            // Don't tell the new player about themselves
            continue;
        }
        if ( global_state[ online_id ].state != INITIAL_ACK ) {
            NetPacket packet;
            packet.player_id = online_id;
            packet.type = PLAYER_CONNECTED;
            pr_debug( "Notifying new player of player:%d", online_id );
            server_send_client_message( client_fd, &packet );
        }
    }
}

void server_on_client_disconnected( int client_fd ) {
    pr_debug( "%d", client_fd );
    NetPacket packet;
    packet.player_id = client_fd;
    packet.type = PLAYER_DISCONNECTED;
    server_send_message_to_all_but_one( client_fd, &packet );
}

void server_on_client_message( int client_fd, NetPacket *packet ) {
    // pr_debug( "Got message from:%d block:%d", client_fd, packet->blockID );
    if ( packet->type != INVALID ) {
        // Tell the other connected players about most types of messages, but mark the
        // packet as from the player that sent it.
        packet->player_id = client_fd;
        server_send_message_to_all_but_one( client_fd, packet );
    }
}

// These constants make creating fd_status_t values less verbose.
const fd_status_t fd_status_R = {.want_read = true, .want_write = false};
const fd_status_t fd_status_W = {.want_read = false, .want_write = true};
const fd_status_t fd_status_RW = {.want_read = true, .want_write = true};
const fd_status_t fd_status_NORW = {.want_read = false, .want_write = false};

void report_peer_connected( const struct sockaddr_in *sa, socklen_t salen, int fd ) {
    char hostbuf[ NI_MAXHOST ];
    char portbuf[ NI_MAXSERV ];
    if ( getnameinfo( ( struct sockaddr * )sa, salen, hostbuf, NI_MAXHOST, portbuf, NI_MAXSERV, 0 ) == 0 ) {
        printf( "peer (%s, %s) connected\n", hostbuf, portbuf );
        server_on_client_connected( fd );
    } else {
        printf( "peer (unknonwn) connected\n" );
    }
}

fd_status_t on_peer_connected( int sockfd, const struct sockaddr_in *peer_addr, socklen_t peer_addr_len ) {
    assert( sockfd < MAXFDS );
    report_peer_connected( peer_addr, peer_addr_len, sockfd );

    // Initialize state to send back a '*' to the peer immediately.
    peer_state_t *peerstate = &global_state[ sockfd ];
    peerstate->state = INITIAL_ACK;
    peerstate->sendbuf.type = SERVER_ACK;

    // Signal that this socket is ready for writing now.
    return fd_status_W;
}

fd_status_t on_peer_ready_recv( int sockfd ) {
    assert( sockfd < MAXFDS );
    peer_state_t *peerstate = &global_state[ sockfd ];

    if ( peerstate->state == INITIAL_ACK ) {
        // Until the initial ACK has been sent to the peer, there's nothing we
        // want to receive. Also, wait until all data staged for sending is sent to
        // receive more data.
        return fd_status_W;
    }

    int nbytes = recv( sockfd, &peerstate->sendbuf, sizeof( NetPacket ), 0 );
    if ( nbytes == 0 ) {
        // The peer disconnected.
        return fd_status_NORW;
    } else if ( nbytes < 0 ) {
        if ( errno == EAGAIN || errno == EWOULDBLOCK ) {
            // The socket is not *really* ready for recv; wait until it is.
            return fd_status_R;
        } else {
            pr_debug( "recv" );
        }
    } else if ( nbytes != sizeof( NetPacket ) ) {
        pr_debug( "Only got a partial packet" );
        return fd_status_R;
    }

    bool ready_to_send = false;
    server_on_client_message( sockfd, &peerstate->sendbuf );

    // Report reading readiness iff there's nothing to send to the peer as a
    // result of the latest recv.
    return ( fd_status_t ){.want_read = !ready_to_send, .want_write = ready_to_send};
}

fd_status_t on_peer_ready_send( int sockfd ) {
    assert( sockfd < MAXFDS );
    peer_state_t *peerstate = &global_state[ sockfd ];

    if ( peerstate->sendbuf.type == INVALID ) {
        // Nothing to send.
        return fd_status_RW;
    }
    int nsent = send( sockfd, &peerstate->sendbuf, sizeof( NetPacket ), 0 );
    if ( nsent == -1 ) {
        if ( errno == EAGAIN || errno == EWOULDBLOCK ) {
            return fd_status_W;
        } else {
            pr_debug( "send" );
        }
    }
    if ( nsent < ( int )sizeof( NetPacket ) ) {
        return fd_status_W;
    } else {
        // Everything was sent successfully; reset the send queue.
        peerstate->sendbuf.type = INVALID;

        // Special-case state transition in if we were in INITIAL_ACK until now.
        if ( peerstate->state == INITIAL_ACK ) {
            peerstate->state = WAIT_FOR_MSG;
        }

        return fd_status_R;
    }
}

int main( int argc, const char **argv ) {
    setvbuf( stdout, NULL, _IONBF, 0 );

    int portnum = 25566;
    if ( argc >= 2 ) {
        portnum = atoi( argv[ 1 ] );
    }
    printf( "Serving on port %d\n", portnum );

    int listener_sockfd = listen_inet_socket( portnum );
    make_socket_non_blocking( listener_sockfd );

    int epollfd = epoll_create1( 0 );
    if ( epollfd < 0 ) {
        pr_debug( "epoll_create1" );
    }

    struct epoll_event accept_event;
    accept_event.data.fd = listener_sockfd;
    accept_event.events = EPOLLIN;
    if ( epoll_ctl( epollfd, EPOLL_CTL_ADD, listener_sockfd, &accept_event ) < 0 ) {
        pr_debug( "epoll_ctl EPOLL_CTL_ADD" );
    }

    struct epoll_event *events = ( struct epoll_event * )calloc( MAXFDS, sizeof( struct epoll_event ) );
    if ( events == NULL ) {
        pr_debug( "Unable to allocate memory for epoll_events" );
    }

    while ( 1 ) {
        int nready = epoll_wait( epollfd, events, MAXFDS, -1 );
        // pr_debug( "epoll returned: %d", nready );
        for ( int i = 0; i < nready; i++ ) {
            if ( events[ i ].events & EPOLLERR ) {
                pr_debug( "epoll_wait returned EPOLLERR" );
            }

            if ( events[ i ].data.fd == listener_sockfd ) {
                // The listening socket is ready; this means a new peer is connecting.

                struct sockaddr_in peer_addr;
                socklen_t peer_addr_len = sizeof( peer_addr );
                int newsockfd = accept( listener_sockfd, ( struct sockaddr * )&peer_addr, &peer_addr_len );
                if ( newsockfd < 0 ) {
                    if ( errno == EAGAIN || errno == EWOULDBLOCK ) {
                        // This can happen due to the nonblocking socket mode; in this
                        // case don't do anything, but print a notice (since these events
                        // are extremely rare and interesting to observe...)
                        printf( "accept returned EAGAIN or EWOULDBLOCK\n" );
                    } else {
                        pr_debug( "accept" );
                    }
                } else {
                    make_socket_non_blocking( newsockfd );
                    if ( newsockfd >= MAXFDS ) {
                        pr_debug( "socket fd (%d) >= MAXFDS (%d)", newsockfd, MAXFDS );
                    }

                    fd_status_t status = on_peer_connected( newsockfd, &peer_addr, peer_addr_len );
                    struct epoll_event event = {0, 0};
                    event.data.fd = newsockfd;
                    if ( status.want_read ) {
                        event.events |= EPOLLIN;
                    }
                    if ( status.want_write ) {
                        event.events |= EPOLLOUT;
                    }

                    if ( epoll_ctl( epollfd, EPOLL_CTL_ADD, newsockfd, &event ) < 0 ) {
                        pr_debug( "epoll_ctl EPOLL_CTL_ADD" );
                    }
                }
            } else {
                // A peer socket is ready.
                if ( events[ i ].events & EPOLLIN ) {
                    // Ready for reading.
                    int fd = events[ i ].data.fd;
                    fd_status_t status = on_peer_ready_recv( fd );
                    struct epoll_event event = {0, 0};
                    event.data.fd = fd;
                    if ( status.want_read ) {
                        event.events |= EPOLLIN;
                    }
                    if ( status.want_write ) {
                        event.events |= EPOLLOUT;
                    }
                    if ( event.events == 0 ) {
                        server_on_client_disconnected( fd );
                        printf( "socket %d closing\n", fd );
                        if ( epoll_ctl( epollfd, EPOLL_CTL_DEL, fd, NULL ) < 0 ) {
                            pr_debug( "epoll_ctl EPOLL_CTL_DEL" );
                        }
                        close( fd );
                    } else if ( epoll_ctl( epollfd, EPOLL_CTL_MOD, fd, &event ) < 0 ) {
                        pr_debug( "epoll_ctl EPOLL_CTL_MOD" );
                    } else {
                        // pr_debug( "Else 1?" );
                    }
                } else if ( events[ i ].events & EPOLLOUT ) {
                    // Ready for writing.
                    int fd = events[ i ].data.fd;
                    fd_status_t status = on_peer_ready_send( fd );
                    struct epoll_event event = {0, 0};
                    event.data.fd = fd;

                    if ( status.want_read ) {
                        event.events |= EPOLLIN;
                    }
                    if ( status.want_write ) {
                        event.events |= EPOLLOUT;
                    }
                    if ( event.events == 0 ) {
                        printf( "socket %d closing\n", fd );
                        if ( epoll_ctl( epollfd, EPOLL_CTL_DEL, fd, NULL ) < 0 ) {
                            pr_debug( "epoll_ctl EPOLL_CTL_DEL" );
                        }
                        close( fd );
                    } else if ( epoll_ctl( epollfd, EPOLL_CTL_MOD, fd, &event ) < 0 ) {
                        pr_debug( "epoll_ctl EPOLL_CTL_MOD" );
                    } else {
                        // pr_debug( "Else 2?" );
                    }
                }
            }
        }
    }

    return 0;
}